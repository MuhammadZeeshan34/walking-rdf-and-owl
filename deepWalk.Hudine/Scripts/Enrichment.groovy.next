new File("GeneratedFiles/Enrichment/Enrichment.txt").delete()
def Enrichment = new File("GeneratedFiles/Enrichment/Enrichment.txt")
def predictionFilesList = []

new File("GeneratedFiles/Enrichment/Correlation.txt").delete()
def Correlation = new File("GeneratedFiles/Enrichment/Correlation.txt")
def correlationFilesList = []

(1..10).each() {
	predictionFilesList.add("../fold${it}/GeneratedFiles/Weka/predictions")
	correlationFilesList.add("../fold${it}/GeneratedFiles/Correlation/TestCorrCoef.txt")
}

Enrichment.withWriter { w ->
  predictionFilesList.each { f ->
	new File(f).withReader { r ->
	  w << r
	}
  }
}

Correlation.withWriter { w ->
  correlationFilesList.each { f ->
	new File(f).withReader { r ->
	  w << r
	}
  }
}

def proc = ["bash", "-c", "paste -d'\t' GeneratedFiles/Enrichment/Enrichment.txt GeneratedFiles/Enrichment/Correlation.txt > GeneratedFiles/Enrichment/predictions.txt"].execute()
println proc.text

new File("GeneratedFiles/Enrichment/Enrichment.txt").delete()
new File("GeneratedFiles/Enrichment/Correlation.txt").delete()

def correctCorr = 0
def correctCounter = 0
def wrongCorr = 0
def wrongCounter = 0

new File("GeneratedFiles/Enrichment/predictions.txt").splitEachLine("\t") { line ->

	def corr = new Double(line[-1])
	if(line[0]?.indexOf("+")>-1)
	{
			wrongCorr += corr
			wrongCounter += 1
	}else
	{
			correctCorr += corr
			correctCounter += 1
	}
}

println ("The correlation mean of " + correctCounter + " instances correctly classified is: " + (correctCorr/correctCounter))
println ("The correlation mean of " + wrongCounter + " instances not correctly classified is: " + (wrongCorr/wrongCounter))

def listMapCorrect = [:].withDefault { new LinkedHashSet() }
def listMapNotCorrect = [:].withDefault { new LinkedHashSet() }

new File("GeneratedFiles/Enrichment/predictions.txt").splitEachLine("\t") { line ->
	def DOID1 = line[-3].replaceAll("_",":")
	def DOID2 = line[-2].replaceAll("_",":")
	def error = line[0]

	if ( !listMapCorrect[DOID1] )
	{
		if(error?.indexOf("+")>-1)
		{
			listMapNotCorrect[DOID1] = 1
			listMapCorrect[DOID1] = 0
		}else
		{
			listMapCorrect[DOID1] = 1
			listMapNotCorrect[DOID1] = 0
		}
	}else
	{
		if(error?.indexOf("+")>-1)
		{
			listMapNotCorrect[DOID1] += 1
		}else
		{
			listMapCorrect[DOID1] += 1
		}
	}

	if ( !listMapCorrect[DOID2] )
	{
		if(error?.indexOf("+")>-1)
		{
			listMapNotCorrect[DOID2] = 1
			listMapCorrect[DOID2] = 0
		}else
		{
			listMapCorrect[DOID2] = 1
			listMapNotCorrect[DOID2] = 0
		}
	}else
	{
		if(error?.indexOf("+")>-1)
		{
			listMapNotCorrect[DOID2] += 1
		}else
		{
			listMapCorrect[DOID2] += 1
		}
	}
}

new File("GeneratedFiles/Enrichment/diseasesDistribution.txt").delete()
def diseasesDistribution = new File("GeneratedFiles/Enrichment/diseasesDistribution.txt")

listMapCorrect.each{ k, v -> diseasesDistribution.append("${k}\t${k}\t${v}\t"+listMapNotCorrect[k] + "\n") }






